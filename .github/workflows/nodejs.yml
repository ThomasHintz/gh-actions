name: CD

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  # push:
  #   branches: [ master ]
  # pull_request:
  #   branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: yarn install
    - run: yarn build
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Upload versioned artifact
      uses: actions/upload-artifact@v1
      with:
        name: dist-${{ steps.get_version.outputs.VERSION }}
        path: build/
    - name: Upload unversioned artifact
      uses: actions/upload-artifact@v1
      with:
        name: build
        path: build/

  copys3:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: download artifact
      uses: actions/download-artifact@v1
      with:
        name: dist-${{ steps.get_version.outputs.VERSION }}

    - name: Deploy to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws s3 cp \
        --recursive \
        --acl public-read \
        --region ap-southeast-2 \
        ./build s3://example/dist-${{ steps.get_version.outputs.VERSION }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: download artifact
      uses: actions/download-artifact@v1
      with:
        name: build

    - name: Deploy to Production
      id: deploy
      uses: Pendect/action-rsyncer@v1.1.0
      env:
        DEPLOY_KEY: ${{secrets.DEPLOY_KEY}}
      with:
        flags: '-avzr --delete'
        options: ''
        ssh_options: ''
        src: 'build/'
        dest: 'nick@app.limos.com:~/prod-limos'
    - name: Display status from deploy
      run: echo "${{ steps.deploy.outputs.status }}"
